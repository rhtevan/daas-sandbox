apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: s2i-kogito
spec:
  params:
    - name: APPLICATION_NAME
      type: string
      default: 'myapp'
      description: The application name
    - name: TLSVERIFY
      type: string
      default: 'true'
      description: >
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
    - name: EXECUTOR_IMAGE
      type: string
      description: The full image tag of the generated executor image
    - name: BUILDER_IMAGE_NAME
      type: string
      default: 'quay.io/kiegroup/kogito-quarkus-jvm-ubi8'
      description: The base image used for packaging compiled runner
    - name: KOGITO_IMAGE_NAME_SUFFIX
      type: string
      default: '-nightly:latest'
      description: The Kogito image name suffix including Kogito version
    - name: NATIVE
      type: string
      default: 'false'
      description: If true build native image, otherwise normal image
  workspaces:
    - name: source
    - name: repo
  steps:
    - name: gen-env-file
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      workingDir: /env-params
      command:
        - /bin/sh
        - '-c'
      args:
        - |
          # Enable quarkus native image build
          echo "NATIVE=$(params.NATIVE)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: compile
      image: quay.io/kiegroup/kogito-quarkus-ubi8-s2i$(params.KOGITO_IMAGE_NAME_SUFFIX)
      script: |
        #!/usr/bin/env bash
        appName="$(params.APPLICATION_NAME)"
        appWorkDir="$(workspaces.source.path)/$appName"
        appTmpDir="/tmp"
        nativeBuild="$(params.NATIVE)"
        repoDir="/home/kogito/.m2"

        echo "id: $(id)"
        echo "application name: $appName"
        echo "native mode: $nativeBuild"

        echo "create symbolic link to maven repo"
        cd $repoDir
        ln -sf $(workspaces.repo.path) repository

        if [[ ! -d "$appWorkDir" ]] ; then
          echo "Working directory for application: $appName not found!"
          exit 1
        fi

        cp -r $appWorkDir/* $appTmpDir
        cd $appTmpDir

        if [[ ${nativeBuild^^} == 'TRUE' ]] ; then
          echo "native build..."
          exec /usr/share/maven/bin/mvn clean package -Pnative
        else
          echo "normal build..."
          exec /usr/share/maven/bin/mvn clean package
        fi
      securityContext:
        runAsUser: 1001
        runAsGroup: 0
      volumeMounts:
        - mountPath: /tmp
          name: tmp
    - name: build
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      workingDir: /tmp
      command:
        - s2i
        - build
        - target
        - $(params.BUILDER_IMAGE_NAME)$(params.KOGITO_IMAGE_NAME_SUFFIX)
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
        - '--environment-file'
        - /env-params/env-file
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-params
          name: envparams
        - mountPath: /tmp
          name: tmp
    - name: package
      image: registry.redhat.io/rhel8/buildah
      workingDir: /gen-source
      command:
        - buildah
        - bud
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers=false'
        - '--squash'
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(params.EXECUTOR_IMAGE)
        - .
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
    - name: push
      image: registry.redhat.io/rhel8/buildah
      command:
        - buildah
        - push
        - '--tls-verify=$(params.TLSVERIFY)'
        - $(params.EXECUTOR_IMAGE)
        - 'docker://$(params.EXECUTOR_IMAGE)'
      securityContext:
        privileged: true
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}
    - name: tmp
      emptyDir: {}
